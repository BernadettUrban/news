/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mjc.school.news.api;

import com.mjc.school.news.model.NewsModel;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.annotation.Generated;
import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-29T17:15:24.135300400+02:00[Europe/Budapest]")
@Validated
@Tag(name = "NewsService", description = "the NewsService API")
public interface NewsServiceApi {

    /**
     * DELETE /api/news/{id} : Delete news by ID
     *
     * @param id (required)
     * @return Deleted news (status code 204)
     */
    @Operation(
            operationId = "deleteNewsById",
            summary = "Delete news by ID",
            tags = {"NewsService"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Deleted news")
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/api/news/{id}"
    )
    ResponseEntity<Void> deleteNewsById(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /api/news : Get all news
     *
     * @return OK (status code 200)
     */
    @Operation(
            operationId = "getNews",
            summary = "Get all news",
            tags = {"NewsService"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = NewsModel.class)))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/news",
            produces = {"application/json"}
    )
    ResponseEntity<List<NewsModel>> getNews(

    );


    /**
     * GET /api/news/{id} : Get news by ID
     *
     * @param id (required)
     * @return OK (status code 200)
     */
    @Operation(
            operationId = "getNewsById",
            summary = "Get news by ID",
            tags = {"NewsService"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = NewsModel.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/news/{id}",
            produces = {"application/json"}
    )
    ResponseEntity<NewsModel> getNewsById(
            @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );

}
