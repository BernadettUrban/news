openapi: "3.0.3"
info:
  description: This is a simple API for news management
  version: 1.0.0
  title: News Service API
paths:
  /api/news:
    get:
      tags:
        - NewsService
      summary: Get all news
      operationId: getNews
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsModel'
  /api/news/{newsId}:
    get:
      tags:
        - NewsService
      summary: Get news by ID
      operationId: getNewsById
      parameters:
        - name: "newsId"
          in: "path"
          description: "ID of the news item to find"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsModel'

    delete:
      tags:
        - NewsService
      summary: Delete a news item by ID
      operationId: deleteNews
      parameters:
        - name: "newsId"
          in: "path"
          description: "ID of the news item to delete"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: News item deleted successfully

  /api/comments/{commentId}:
    get:
      tags:
        - CommentService
      summary: Get comment by ID
      operationId: getCommentById
      parameters:
        - name: "commentId"
          in: "path"
          description: "ID of the comment item to find"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentModel'
    delete:
      tags:
        - CommentService
      summary: Delete a comment item by ID
      operationId: deleteComments
      parameters:
        - name: "commentId"
          in: "path"
          description: "ID of the comment item to delete"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Comment deleted successfully

  /api/authors:
    get:
      tags:
        - AuthorService
      summary: List all authors
      operationId: getAuthors
      responses:
        '200':
          description: List of authors
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/AuthorModel'
    post:
      tags:
        - AuthorService
      summary: Create a new author
      operationId: createAuthor
      requestBody:
        description: Author object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorModel'
      responses:
        '201':
          description: Created author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorModel'
  /api/authors/{authorId}:
    get:
      tags:
        - AuthorService
      summary: Get author by ID
      operationId: getAuthorById
      parameters:
        - name: "authorId"
          in: "path"
          description: "ID of the author to retrieve"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Retrieved author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorModel'
    put:
      tags:
        - AuthorService
      summary: Update an author by ID
      operationId: updateAuthor
      parameters:
        - name: "authorId"
          in: "path"
          description: "ID of the author to update"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Author object with updated information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorModel'
      responses:
        '200':
          description: Updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorModel'
    delete:
      tags:
        - AuthorService
      summary: Delete an author by ID
      operationId: deleteAuthor
      parameters:
        - name: "authorId"
          in: "path"
          description: "ID of the author to delete"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Author deleted successfully
  /api/authors/search:
    get:
      tags:
        - AuthorService
      summary: Search authors by part of their name
      operationId: searchAuthorsByName
      parameters:
        - name: name
          in: query
          description: Part of the name of the authors to search for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of authors matching the search criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorModel'
  /api/tags:
    get:
      tags:
        - TagService
      summary: List all tags
      operationId: getTags
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/TagModel'
    post:
      tags:
        - TagService
      summary: Create a new tag
      operationId: createTag
      requestBody:
        description: Tag object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModel'
      responses:
        '201':
          description: Created tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagModel'
  /api/tags/{tagId}:
    get:
      tags:
        - TagService
      summary: Get tag by ID
      operationId: getTagById
      parameters:
        - name: "tagId"
          in: "path"
          description: "ID of the tag to retrieve"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Retrieved tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagModel'
    put:
      tags:
        - TagService
      summary: Update a tag by ID
      operationId: updateTag
      parameters:
        - name: "tagId"
          in: "path"
          description: "ID of the tag to update"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Tag object with updated information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModel'
      responses:
        '200':
          description: Updated tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagModel'
    delete:
      tags:
        - TagService
      summary: Delete a tag by ID
      operationId: deleteTag
      parameters:
        - name: "tagId"
          in: "path"
          description: "ID of the tag to delete"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Tag deleted successfully
  /api/tags/search:
    get:
      tags:
        - TagService
      summary: Search tags by part of their name
      operationId: searchTagsByName
      parameters:
        - name: name
          in: query
          description: Part of the name of the tags to search for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of tags matching the search criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagModel'
components:
  schemas:
    AuthorModel:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string

    TagModel:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    NewsTagModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        news:
          $ref: '#/components/schemas/NewsModel'
        tag:
          $ref: '#/components/schemas/TagModel'
    NewsModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        newsContent:
          type: string
        author:
          $ref: '#/components/schemas/AuthorModel'
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        newstags:
          type: array
          items:
            $ref: '#/components/schemas/NewsTagModel'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentModel'
    CommentModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        commentContent:
          type: string
        news:
          $ref: '#/components/schemas/NewsModel'
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time


